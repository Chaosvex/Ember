/*
 * Copyright (c) 2014 - 2024 Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the DBC parser tool.
 * Rather than making changes here, you should consider updating the
 * parser's templates/DBC definitions and rerunning.
 */

#include <dbcreader/DiskLoader.h>
#include <dbcreader/DBCHeader.h>
#include <dbcreader/Storage.h>
#include <dbcreader/DiskDefs.h>
#include <dbcreader/MemoryDefs.h>
#include <boost/interprocess/file_mapping.hpp>
#include <boost/interprocess/mapped_region.hpp>
#include <format>
#include <string>
#include <string_view>
#include <sstream>
#include <cstdint>
#include <cstddef>

namespace bi = boost::interprocess;

namespace ember::dbc {

namespace detail {

#pragma pack(push, 1)

template<typename T>
struct MappedDBC {
	const DBCHeader* header;
	const T* records;
	const char* strings;
};

#pragma pack(pop)

template<typename T>
const MappedDBC<T> get_offsets(const void* start) {
	const char* data = static_cast<const char*>(start);
	auto dbc = reinterpret_cast<const DBCHeader*>(data);
	auto records = reinterpret_cast<const T*>(data + sizeof(DBCHeader));
	auto string_block = data + sizeof(DBCHeader) + (dbc->record_size * dbc->records);
	return MappedDBC<T>{dbc, records, string_block};
}

void validate_dbc(const char* name, const DBCHeader* header, std::size_t expect_size,
                  std::size_t expect_fields, std::size_t dbc_size) {
	if(header->magic != DBC_MAGIC) {
		std::stringstream err;
		err << name << ": " << "Invalid header magic - found 0x" << std::hex << header->magic
		    << ", expected 0x" << DBC_MAGIC;
		throw std::runtime_error(err.str());
	}

	if(header->record_size != expect_size || header->fields != expect_fields) {
		std::stringstream err;
		err << name << ": " << "Expected " << expect_fields << " fields, " << expect_size << " byte records "
		    << "but DBC has " << header->fields << " fields and " << header->record_size << " byte records";
		throw std::runtime_error(err.str());
	}

	std::size_t calculated_size = sizeof(DBCHeader) + header->string_block_len
	                              + (header->record_size * header->records);

	if(calculated_size != dbc_size) {
		std::stringstream err;
		err << name << ": " << "Invalid size! Expected " << calculated_size << " bytes but the file was "
		    << dbc_size << " bytes";
		throw std::runtime_error(err.str());
	}
}

<%TEMPLATE_DISK_LOAD_FUNCTIONS%>

} // detail

DiskLoader::DiskLoader(std::string dir_path, LogCB log_cb)
                       : log_cb_(std::move(log_cb)), dir_path_(std::move(dir_path)) {
<%TEMPLATE_DISK_LOAD_MAP_INSERTION%>
}

Storage DiskLoader::load(std::span<const std::string_view> whitelist) const {
	Storage storage;

	for(auto& dbc : whitelist) {
		auto it = dbc_map.find(dbc);

		if(it == dbc_map.end()) {
			throw std::runtime_error(std::format("Cannot load an unknown DBC file, {}", dbc));
		}
		
		log_cb_(std::format("Loading {} DBC data...", dbc));
		it->second(storage, dir_path_);
	}

	return storage;
}

Storage DiskLoader::load() const {
	Storage storage;
<%TEMPLATE_DISK_LOAD_FUNCTION_CALLS%>
	return storage;		
}

} // dbc, ember