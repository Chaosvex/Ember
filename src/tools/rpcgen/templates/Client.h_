/*
 * Copyright (c) {{year}} Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the rpcgen tool.
 * Rather than making changes here, you should consider updating the
 * generator's templates and rerunning.
 */

#include "{{fbs_name}}_generated.h"

#include <spark/v2/Server.h>
#include <spark/v2/Handler.h>
#include <spark/v2/Link.h>
#include <spark/v2/Message.h>
#include <functional>

namespace ember::services {

class {{name}}Client : public spark::v2::Handler {
public:
## for handler in handlers
	using {{handler.call}}Response = std::function<void(messaging::{{name}}::{{handler.response}})>();
## endfor

## for handler in handlers
	void dispatch_{{handler.response_sn}}(flatbuffers::Verifier& verifier, const messaging::{{name}}::{{handler.response}}* msg);
## endfor

	std::string type() {
		return "{{name}}";
	}

	void on_message(const spark::v2::Link& link, const spark::v2::MessageTemp& message) override {
		auto fb = messaging::{{name}}::Get{{root}}(message.fb);
		flatbuffers::Verifier verifier(msg.data.data(), msg.data.size());

		switch(fb->message_type()) {
## for handler in handlers
			case messaging::{{name}}::Message::{{handler.response}}:
				dispatch_{{handler.response_sn}}(verifier, fb->message_as_{{handler.response}}());
				break;
## endfor
		}
	}

## for handler in handlers
	void dispatch_{{handler.response_sn}}(flatbuffers::Verifier& verifier, const messaging::{{name}}::{{handler.response}}* msg) {
		if(!msg->Verify(verifier)) {
			return;
		}

		handle_{{handler.name}}_response(msg);
	}
## endfor

## for handler in handlers
	/*virtual void handle_{{handler.name}}_response(
		{{handler.response_ns}}* msg) = 0;*/

## endfor
};

} // services, ember