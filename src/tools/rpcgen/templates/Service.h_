/*
 * Copyright (c) {{year}} Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the rpcgen tool.
 * Rather than making changes here, you should consider updating the
 * generator's templates and rerunning.
 */

#include "{{fbs_name}}_generated.h"

#include <spark/Server.h>
#include <spark/Handler.h>
#include <spark/Link.h>
#include <spark/Message.h>
#include <boost/uuid/uuid_generators.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <format>
#include <functional>
#include <optional>

namespace ember::services {

class {{name}}Service : public spark::Handler {
	spark::Server& spark_;
	boost::uuids::uuid uuid_;

	flatbuffers::FlatBufferBuilder serialise(auto& msg) const {
		flatbuffers::FlatBufferBuilder fbb;
		rpc::{{name}}::EnvelopeT env;
		env.message.Set(msg);
		const auto packed = rpc::{{name}}::Envelope::Pack(fbb, &env);
		fbb.Finish(packed);
		return fbb;
	}

protected:
	bool send(auto& msg, const spark::Link& link, const spark::Token& token) const {
		if(auto channel = link.channel.lock(); channel) {
			auto fbb = serialise(msg);
			return channel->send(std::move(fbb), token);
		} else {
			return false;
		}
	}

	bool send(auto& msg, const spark::Link& link) const {
		if(auto channel = link.channel.lock(); channel) {
			auto fbb = serialise(msg);
			return channel->send(std::move(fbb));
		} else {
			return false;
		}
	}

public:
	{{name}}Service(spark::Server& spark)
		: spark_(spark),
		  uuid_(boost::uuids::random_generator()()) {
		spark_.register_handler(this);
	}

	~{{name}}Service() {
		spark_.deregister_handler(this);
	}

	std::string name() override {
		return std::format("{{name}}:{}", boost::uuids::to_string(uuid_));
	}

	std::string type() override {
		return "{{name}}";
	}

	void on_message(
		const spark::Link& link,
		std::span<const std::uint8_t> msg,
		const spark::Token& token = {}) override {
		auto fb = rpc::{{name}}::Get{{root}}(msg.data());
		flatbuffers::Verifier verifier(msg.data(), msg.size());

		switch(fb->message_type()) {
## for handler in handlers
			case rpc::{{name}}::Message::{{handler.request}}:
				dispatch_{{handler.request_sn}}(verifier, *fb->message_as_{{handler.request}}(), link, token);
				break;
## endfor
		}
	}

## for handler in handlers
	void dispatch_{{handler.request_sn}}(
		flatbuffers::Verifier& verifier,
		const rpc::{{name}}::{{handler.request}}& msg,
		const spark::Link& link,
		const spark::Token& token) {
		if(!msg.Verify(verifier)) {
			return;
		}

		auto reply = handle_{{handler.name}}(msg, link, token);

		if(reply) {
			send(*reply, link, token);
		}
	}
## endfor

## for handler in handlers
	virtual std::optional<{{handler.response_ns}}T> handle_{{handler.name}}(
		const {{handler.request_ns}}& msg,
		const spark::Link& link,
		const spark::Token& token) { return std::nullopt; }

## endfor

	void connect_failed(std::string_view ip, std::uint16_t port) override {}
};

} // services, ember