/*
 * Copyright (c) {{year}} Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the rpcgen tool.
 * Rather than making changes here, you should consider updating the
 * generator's templates and rerunning.
 */

#include "{{fbs_name}}_generated.h"

#include <spark/v2/Server.h>
#include <spark/v2/Handler.h>
#include <spark/v2/Link.h>
#include <spark/v2/Message.h>
#include <boost/uuid/uuid_generators.hpp>
#include <boost/uuid/uuid_io.hpp>
#include <format>
#include <functional>

namespace ember::services {

class {{name}}Service : public spark::v2::Handler {
	spark::v2::Server& spark_;
	boost::uuids::uuid uuid_;

	void send(auto& msg, const spark::v2::Link& link) {
		flatbuffers::FlatBufferBuilder fbb;

		// serialise message
		messaging::{{name}}::EnvelopeT env;
		env.message.Set(msg);
		const auto packed = messaging::{{name}}::Envelope::Pack(fbb, &env);
		fbb.Finish(packed);

		auto channel = link.net.lock();

		if(channel) {
			channel->send(std::move(fbb));
		}
	}

public:
## for handler in handlers
	using {{handler.call}}Response = std::function<void(messaging::{{name}}::{{handler.response}})>();
## endfor

	{{name}}Service(spark::v2::Server& spark)
		: spark_(spark),
		  uuid_(boost::uuids::random_generator()()) {
		spark_.register_handler(this);
	}

	~{{name}}Service() {
		spark_.deregister_handler(this);
	}

	std::string name() override {
		return std::format("{{name}}:{}", boost::uuids::to_string(uuid_));
	}

	std::string type() override {
		return "{{name}}";
	}

	void on_message(const spark::v2::Link& link, std::span<const std::uint8_t> msg) override {
		auto fb = messaging::{{name}}::Get{{root}}(msg.data());
		flatbuffers::Verifier verifier(msg.data(), msg.size());

		switch(fb->message_type()) {
## for handler in handlers
			case messaging::{{name}}::Message::{{handler.request}}:
				dispatch_{{handler.request_sn}}(verifier, fb->message_as_{{handler.request}}(), link);
				break;
## endfor
		}
	}

## for handler in handlers
	void dispatch_{{handler.request_sn}}(
		flatbuffers::Verifier& verifier,
	    const messaging::{{name}}::{{handler.request}}* msg,
	    const spark::v2::Link& link) {
		if(!msg->Verify(verifier)) {
			return;
		}

		{{handler.response_ns}}T reply;
		handle_{{handler.name}}(msg, reply);
		send(reply, link);
	}
## endfor

## for handler in handlers
	virtual void handle_{{handler.name}}(
		const {{handler.request_ns}}* msg,
		{{handler.response_ns}}T& reply) {}

## endfor
};

} // services, ember